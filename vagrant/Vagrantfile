# -*- mode: ruby -*-
# vi: set ft=ruby :

##########################    config_network     ##################################################
$config_network = <<-SCRIPT
route add default gw 192.168.1.1
eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`
SCRIPT
######################################################################################################

##########################    install_basic_pkg    ##################################################
$install_basic_pkg = <<-SCRIPT
apt-get update
apt-get install -y vim bash-completion jq wget curl tmux etcd-client
sudo sed -i.bak '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo swapoff -a
SCRIPT
######################################################################################################

##########################    bridged_traffic    #####################################################
$bridged_traffic = <<-SCRIPT
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sudo sysctl --system
<<-SCRIPT
######################################################################################################

##########################    containerd_prereq  #####################################################
$containerd_prereq = <<-SCRIPT
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter


cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system

<<-SCRIPT
######################################################################################################

##########################    install_containerd #####################################################
$install_containerd = <<-SCRIPT
sudo apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
    | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) \
   signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
   https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get install docker-ce docker-ce-cli containerd.io
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sed -i '/options/a \\t    SystemdCgroup = true' config.toml
sudo systemctl restart containerd

<<-SCRIPT
######################################################################################################

##########################   setup_user_enviornment ##################################################
$setup_user_enviornment = <<-SCRIPT
sudo su - vagrant
kubectl completion bash >> ~/.bashrc
echo "alias k=kubectl" >> ~/.bashrc
complete -F __start_kubectl k
echo "autocmd FileType yaml setlocal ai ts=2 sw=2 sts=2 et" > ~/.vimrc
exit
SCRIPT
######################################################################################################


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.


	Vagrant.configure("2") do |config|
  

# The most common configuration options are documented and commented below.
# For a complete reference, please see the online documentation at
# https://docs.vagrantup.com.

	config.vm.provider "vmware_desktop"

# Every Vagrant development environment requires a box. You can search for
# boxes at https://vagrantcloud.com/search.

	config.vm.box = "hashicorp/bionic64"
	config.vm.disk :disk, size: "20GB", primary: true
	config.vm.hostname = "control01.lab.local"
	config.vm.provider "vmware_desktop" do |v|    
		v.gui = true
		v.memory = "4096"
		v.cpus = 2
	end
	
	config.vm.network "public_network", ip: "192.168.1.50"

#---------------------------------------------------------------------
config.vm.provision "shell", inline: <<-SHELL
route add default gw 192.168.1.1
eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`
apt-get update
apt-get install -y vim bash-completion jq wget curl tmux etcd-client
SHELL
#---------------------------------------------------------------------
config.vm.provision "allow-bridge-nf-traffic", type: "shell", :path => "ubuntu/allow-bridge-nf-traffic.sh"
config.vm.provision "install_basic_pkg", type: "shell", :path => "ubuntu/install_basic_pkg.sh"
config.vm.provision "install-containerd-prereq", type: "shell", :path => "ubuntu/install-containerd-prereq.sh"
config.vm.provision "install-containerd", type: "shell", :path => "ubuntu/install-containerd.sh"
config.vm.provision "install-kubeadm-kubectl-kubelet", type: "shell", :path => "ubuntu/install-kubeadm-kubectl-kubelet.sh"
config.vm.provision "setup-user-enviornment", type: "shell", :path => "ubuntu/setup-user-enviornment.sh"
#---------------------------------------------------------------------

#---------------------------------------------------------------------




#	config.vm.provision "shell", inline: $config_network
#	config.vm.provision "shell", inline: $install_basic_pkg

#---------------------------------------------------------------------
#config.vm.provision "shell", inline: <<-SHELL
#sudo su - vagrant
#kubectl completion bash >> ~/.bashrc
#echo \"alias k=kubectl\" >> ~/.bashrc
#complete -F __start_kubectl k
#echo \"autocmd FileType yaml setlocal ai ts=2 sw=2 sts=2 et\" > ~/.vimrc
#exit
#SHELL
#---------------------------------------------------------------------


#	config.vm.provision "shell", inline: $install_containerd
#	config.vm.provision "shell", inline: $setup_user_enviornment

#	config.vm.provision "shell", inline: "route add default gw 192.168.1.1"
#  	config.vm.provision "shell",    run: "always",    inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"

	

# Disable automatic box update checking. If you disable this, then
# boxes will only be checked for updates when the user runs
# `vagrant box outdated`. This is not recommended.
# config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.

end
